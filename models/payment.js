// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Payment = sequelize.define('payment', {
    paymentId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      allowNull: false,
    },
    label: {
      type: DataTypes.STRING,
    },
    downPayment: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    downPercentage: {
      type: DataTypes.DOUBLE,
    },
    displayListing: {
      type: DataTypes.INTEGER,
    },
    rateHelp: {
      type: DataTypes.INTEGER,
    },
    active: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
  }, {
    tableName: 'payment',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  Payment.associate = (models) => {
    Payment.belongsTo(models.paymentType, {
      foreignKey: {
        name: 'paymentTypeIdKey',
        field: 'payment_type_id',
      },
      targetKey: 'paymentTypeId',
      as: 'paymentType',
    });
    Payment.hasMany(models.booking, {
      foreignKey: {
        name: 'paymentIdKey',
        field: 'payment_id',
      },
      sourceKey: 'paymentId',
      as: 'bookings',
    });
    Payment.hasMany(models.paymentPeriod, {
      foreignKey: {
        name: 'paymentIdKey',
        field: 'payment_id',
      },
      sourceKey: 'paymentId',
      as: 'paymentPeriods',
    });
    Payment.hasMany(models.paymentTranslation, {
      foreignKey: {
        name: 'paymentIdKey',
        field: 'payment_id',
      },
      sourceKey: 'paymentId',
      as: 'paymentTranslations',
    });
  };

  return Payment;
};
