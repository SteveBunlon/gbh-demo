// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Vehicle = sequelize.define('vehicleSmartView', {
    vehicleId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      allowNull: false,
    },
    vehicleErpCode: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    vehicleName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    vehicleDetails: {
      type: DataTypes.STRING,
    },
    sipp: {
      type: DataTypes.STRING,
    },
    vehicleBrand: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    vehicleModel: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    vehicleOrder: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    minimumAge: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    maximumAge: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    minYoungDriverAge: {
      type: DataTypes.INTEGER,
    },
    minimumDrivingExperience: {
      type: DataTypes.INTEGER,
    },
    deposit: {
      type: DataTypes.DOUBLE,
    },
    accidentDeductible: {
      type: DataTypes.DOUBLE,
    },
    theftDeductible: {
      type: DataTypes.DOUBLE,
    },
    isGuaranteed: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
    rateHelp: {
      type: DataTypes.INTEGER,
    },
    active: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    depositValuePartialDeductible: {
      type: DataTypes.DOUBLE,
    },
    depositValueTotalDeductible: {
      type: DataTypes.DOUBLE,
    },
    isUnlicensed: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
    },
    excess: {
      type: DataTypes.DOUBLE,
    },
    excessPartialDeductible: {
      type: DataTypes.DOUBLE,
    },
    excessTotalDeductible: {
      type: DataTypes.DOUBLE,
    },
  }, {
    tableName: 'vehicle',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  Vehicle.associate = (models) => {
    Vehicle.belongsTo(models.vehicleType, {
      foreignKey: {
        name: 'vehicleTypeIdKey',
        field: 'vehicle_type_id',
      },
      targetKey: 'vehicleTypeId',
      as: 'vehicleType',
    });
    Vehicle.belongsTo(models.vehicleCategory, {
      foreignKey: {
        name: 'vehicleCategoryIdKey',
        field: 'vehicle_category_id',
      },
      targetKey: 'vehicleCategoryId',
      as: 'vehicleCategory',
    });
    Vehicle.belongsTo(models.branch, {
      foreignKey: {
        name: 'branchIdKey',
        field: 'branch_id',
      },
      targetKey: 'branchId',
      as: 'branch',
    });
    Vehicle.belongsToMany(models.includedService, {
      through: 'includedServiceVehicle',
      foreignKey: 'vehicle_id',
      otherKey: 'included_service_id',
      as: 'includedServiceThroughIncludedServiceVehicles',
    });
    Vehicle.belongsToMany(models.promoCode, {
      through: 'promoCodeVehicle',
      foreignKey: 'vehicle_id',
      otherKey: 'promo_code_id',
      as: 'promoCodeThroughPromoCodeVehicles',
    });
    Vehicle.belongsToMany(models.vehicleType, {
      through: 'secondaryVehicleType',
      foreignKey: 'vehicle_id',
      otherKey: 'vehicle_type_id',
      as: 'vehicleTypeThroughSecondaryVehicleTypes',
    });
    Vehicle.belongsToMany(models.paymentPeriod, {
      through: 'vehiclePaymentPeriod',
      foreignKey: 'vehicle_id',
      otherKey: 'payment_period_id',
      as: 'paymentPeriodThroughVehiclePaymentPeriods',
    });
    Vehicle.hasMany(models.attributeValue, {
      foreignKey: {
        name: 'vehicleIdKey',
        field: 'vehicle_id',
      },
      sourceKey: 'vehicleId',
      as: 'attributeValues',
    });
    Vehicle.hasMany(models.booking, {
      foreignKey: {
        name: 'vehicleIdKey',
        field: 'vehicle_id',
      },
      sourceKey: 'vehicleId',
      as: 'bookings',
    });
    Vehicle.hasMany(models.booking, {
      foreignKey: {
        name: 'vehicleIdInitialKey',
        field: 'vehicle_id_initial',
      },
      sourceKey: 'vehicleId',
      as: 'vehicleIdInitialBookings',
    });
    Vehicle.hasMany(models.featuredVehicle, {
      foreignKey: {
        name: 'vehicleIdKey',
        field: 'vehicle_id',
      },
      sourceKey: 'vehicleId',
      as: 'featuredVehicles',
    });
    Vehicle.hasMany(models.rateExtraValue, {
      foreignKey: {
        name: 'vehicleIdKey',
        field: 'vehicle_id',
      },
      sourceKey: 'vehicleId',
      as: 'rateExtraValues',
    });
    Vehicle.hasMany(models.rateVehicleValue, {
      foreignKey: {
        name: 'vehicleIdKey',
        field: 'vehicle_id',
      },
      sourceKey: 'vehicleId',
      as: 'rateVehicleValues',
    });
    Vehicle.hasMany(models.vehicleTypeLink, {
      foreignKey: {
        name: 'vehicleIdKey',
        field: 'vehicle_id',
      },
      sourceKey: 'vehicleId',
      as: 'vehicleTypeLinks',
    });
  };

  return Vehicle;
};
