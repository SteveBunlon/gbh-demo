// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Agency = sequelize.define('agency', {
    agencyId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      allowNull: false,
    },
    agencyName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    agencyDescription: {
      type: DataTypes.STRING,
    },
    city: {
      type: DataTypes.STRING,
    },
    agencyErpCode: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
    },
    managerName: {
      type: DataTypes.STRING,
    },
    managerPhone: {
      type: DataTypes.STRING,
    },
    phone: {
      type: DataTypes.STRING,
    },
    cellPhone: {
      type: DataTypes.STRING,
    },
    fax: {
      type: DataTypes.STRING,
    },
    address: {
      type: DataTypes.STRING,
    },
    firstAddress: {
      type: DataTypes.STRING,
    },
    secondAddress: {
      type: DataTypes.STRING,
    },
    postalCode: {
      type: DataTypes.STRING,
    },
    latitude: {
      type: DataTypes.DOUBLE,
    },
    longitude: {
      type: DataTypes.DOUBLE,
    },
    waitingPeriod: {
      type: DataTypes.INTEGER,
    },
    defaultReturnDelay: {
      type: DataTypes.INTEGER,
    },
    defaultTime: {
      type: DataTypes.TIME,
    },
    displayOrder: {
      type: DataTypes.INTEGER,
    },
    active: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
  }, {
    tableName: 'agency',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  Agency.associate = (models) => {
    Agency.belongsTo(models.branch, {
      foreignKey: {
        name: 'branchIdKey',
        field: 'branch_id',
      },
      targetKey: 'branchId',
      as: 'branch',
    });
    Agency.belongsTo(models.agencyType, {
      foreignKey: {
        name: 'agencyTypeIdKey',
        field: 'agency_type_id',
      },
      targetKey: 'agencyTypeId',
      as: 'agencyType',
    });
    Agency.belongsTo(models.zone, {
      foreignKey: {
        name: 'zoneIdKey',
        field: 'zone_id',
      },
      targetKey: 'zoneId',
      as: 'zone',
    });
    Agency.belongsToMany(models.extra, {
      through: 'extraAgency',
      foreignKey: 'agency_id',
      otherKey: 'extra_id',
      as: 'extraThroughExtraAgencies',
    });
    Agency.belongsToMany(models.extraType, {
      through: 'extraTypeAgency',
      foreignKey: 'agency_id',
      otherKey: 'extra_type_id',
      as: 'extraTypeThroughExtraTypeAgencies',
    });
    Agency.hasMany(models.agencyFilterAgency, {
      foreignKey: {
        name: 'agencyIdKey',
        field: 'agency_id',
      },
      sourceKey: 'agencyId',
      as: 'agencyFilterAgencies',
    });
    Agency.hasMany(models.agencyRateVehicle, {
      foreignKey: {
        name: 'agencyIdKey',
        field: 'agency_id',
      },
      sourceKey: 'agencyId',
      as: 'agencyRateVehicles',
    });
    Agency.hasMany(models.agencySpecialSchedule, {
      foreignKey: {
        name: 'agencyIdKey',
        field: 'agency_id',
      },
      sourceKey: 'agencyId',
      as: 'agencySpecialSchedules',
    });
    Agency.hasMany(models.booking, {
      foreignKey: {
        name: 'pickupAgencyIdKey',
        field: 'pickup_agency_id',
      },
      sourceKey: 'agencyId',
      as: 'pickupAgencyBookings',
    });
    Agency.hasMany(models.booking, {
      foreignKey: {
        name: 'dropOffAgencyIdKey',
        field: 'drop_off_agency_id',
      },
      sourceKey: 'agencyId',
      as: 'dropOffAgencyBookings',
    });
    Agency.hasMany(models.leadForm, {
      foreignKey: {
        name: 'agencyIdKey',
        field: 'agency_id',
      },
      sourceKey: 'agencyId',
      as: 'leadForms',
    });
    Agency.hasMany(models.period, {
      foreignKey: {
        name: 'agencyIdKey',
        field: 'agency_id',
      },
      sourceKey: 'agencyId',
      as: 'periods',
    });
    Agency.hasMany(models.rateOneWay, {
      foreignKey: {
        name: 'dropOffAgencyIdKey',
        field: 'drop_off_agency_id',
      },
      sourceKey: 'agencyId',
      as: 'dropOffAgencyRateOneWays',
    });
    Agency.hasMany(models.rateOneWay, {
      foreignKey: {
        name: 'pickupAgencyIdKey',
        field: 'pickup_agency_id',
      },
      sourceKey: 'agencyId',
      as: 'pickupAgencyRateOneWays',
    });
  };

  return Agency;
};
