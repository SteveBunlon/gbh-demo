// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const PaymentType = sequelize.define('paymentType', {
    paymentTypeId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      allowNull: false,
    },
    wsCustomerCode: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    onlinePayment: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    displayOrder: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    rateHelp: {
      type: DataTypes.INTEGER,
    },
    active: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    rateWaitingPeriod: {
      type: DataTypes.INTEGER,
    },
    taxRate: {
      type: DataTypes.DOUBLE,
    },
  }, {
    tableName: 'payment_type',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  PaymentType.associate = (models) => {
    PaymentType.belongsTo(models.application, {
      foreignKey: {
        name: 'applicationIdKey',
        field: 'application_id',
      },
      targetKey: 'applicationId',
      as: 'application',
    });
    PaymentType.belongsTo(models.paymentTypeCategory, {
      foreignKey: {
        name: 'paymentTypeCategoryIdKey',
        field: 'payment_type_category_id',
      },
      targetKey: 'paymentTypeCategoryId',
      as: 'paymentTypeCategory',
    });
    PaymentType.belongsToMany(models.workflowTask, {
      through: 'workflowTaskPaymentType',
      foreignKey: 'payment_type_id',
      otherKey: 'workflow_task_id',
      as: 'workflowTaskThroughWorkflowTaskPaymentTypes',
    });
    PaymentType.hasMany(models.payment, {
      foreignKey: {
        name: 'paymentTypeIdKey',
        field: 'payment_type_id',
      },
      sourceKey: 'paymentTypeId',
      as: 'paymentTypePayments',
    });
    PaymentType.hasMany(models.paymentTypeTranslation, {
      foreignKey: {
        name: 'paymentTypeIdKey',
        field: 'payment_type_id',
      },
      sourceKey: 'paymentTypeId',
      as: 'paymentTypePaymentTypeTranslations',
    });
    PaymentType.hasMany(models.promoCode, {
      foreignKey: {
        name: 'paymentTypeIdKey',
        field: 'payment_type_id',
      },
      sourceKey: 'paymentTypeId',
      as: 'paymentTypePromoCodes',
    });
    PaymentType.hasMany(models.rateVehicle, {
      foreignKey: {
        name: 'paymentTypeIdKey',
        field: 'payment_type_id',
      },
      sourceKey: 'paymentTypeId',
      as: 'paymentTypeRateVehicles',
    });
  };

  return PaymentType;
};
