// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const WorkflowTask = sequelize.define('workflowTask', {
    workflowTaskId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      allowNull: false,
    },
    cronExpression: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    parameters: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    active: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
  }, {
    tableName: 'workflow_task',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  WorkflowTask.associate = (models) => {
    WorkflowTask.belongsTo(models.branch, {
      foreignKey: {
        name: 'branchIdKey',
        field: 'branch_id',
      },
      targetKey: 'branchId',
      as: 'branch',
    });
    WorkflowTask.belongsTo(models.promoCode, {
      foreignKey: {
        name: 'promoCodeIdKey',
        field: 'promo_code_id',
      },
      targetKey: 'promoCodeId',
      as: 'promoCode',
    });
    WorkflowTask.belongsTo(models.extraType, {
      foreignKey: {
        name: 'extraTypeIdKey',
        field: 'extra_type_id',
      },
      targetKey: 'extraTypeId',
      as: 'extraType',
    });
    WorkflowTask.belongsTo(models.bookingActionType, {
      foreignKey: {
        name: 'bookingActionTypeIdKey',
        field: 'booking_action_type_id',
      },
      targetKey: 'bookingActionTypeId',
      as: 'bookingActionType',
    });
    WorkflowTask.belongsToMany(models.extra, {
      through: 'workflowTaskExtra',
      foreignKey: 'workflow_task_id',
      otherKey: 'extra_id',
      as: 'extraThroughWorkflowTaskExtras',
    });
    WorkflowTask.belongsToMany(models.paymentType, {
      through: 'workflowTaskPaymentType',
      foreignKey: 'workflow_task_id',
      otherKey: 'payment_type_id',
      as: 'paymentTypeThroughWorkflowTaskPaymentTypes',
    });
    WorkflowTask.hasMany(models.bookingAction, {
      foreignKey: {
        name: 'workflowTaskIdKey',
        field: 'workflow_task_id',
      },
      sourceKey: 'workflowTaskId',
      as: 'workflowTaskBookingActions',
    });
    WorkflowTask.hasMany(models.workflowCalendar, {
      foreignKey: {
        name: 'workflowTaskIdKey',
        field: 'workflow_task_id',
      },
      sourceKey: 'workflowTaskId',
      as: 'workflowTaskWorkflowCalendars',
    });
  };

  return WorkflowTask;
};
