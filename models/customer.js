// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Customer = sequelize.define('customer', {
    customerId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      allowNull: false,
    },
    driverErpId: {
      type: DataTypes.INTEGER,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    password: {
      type: DataTypes.STRING,
    },
    firstName: {
      type: DataTypes.STRING,
    },
    lastName: {
      type: DataTypes.STRING,
    },
    address: {
      type: DataTypes.STRING,
    },
    postalCode: {
      type: DataTypes.STRING,
    },
    city: {
      type: DataTypes.STRING,
    },
    birthdate: {
      type: DataTypes.DATEONLY,
    },
    driverLicenceNumber: {
      type: DataTypes.STRING,
    },
    driverLicenceDate: {
      type: DataTypes.DATEONLY,
    },
    phone: {
      type: DataTypes.STRING,
    },
    driverLicencePlace: {
      type: DataTypes.STRING,
    },
    active: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
  }, {
    tableName: 'customer',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  Customer.associate = (models) => {
    Customer.belongsTo(models.branch, {
      foreignKey: {
        name: 'branchIdKey',
        field: 'branch_id',
      },
      targetKey: 'branchId',
      as: 'branch',
    });
    Customer.belongsTo(models.country, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      targetKey: 'countryId',
      as: 'country',
    });
    Customer.belongsTo(models.civility, {
      foreignKey: {
        name: 'civilityIdKey',
        field: 'civility_id',
      },
      targetKey: 'civilityId',
      as: 'civility',
    });
    Customer.belongsTo(models.locale, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      targetKey: 'localeCode',
      as: 'localeCode',
    });
    Customer.hasMany(models.attachment, {
      foreignKey: {
        name: 'customerIdKey',
        field: 'customer_id',
      },
      sourceKey: 'customerId',
      as: 'attachments',
    });
    Customer.hasMany(models.booking, {
      foreignKey: {
        name: 'customerIdKey',
        field: 'customer_id',
      },
      sourceKey: 'customerId',
      as: 'bookings',
    });
  };

  return Customer;
};
