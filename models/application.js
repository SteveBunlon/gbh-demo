// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Application = sequelize.define('application', {
    applicationId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      allowNull: false,
    },
    applicationLabel: {
      type: DataTypes.STRING,
    },
    applicationUrl: {
      type: DataTypes.STRING,
    },
    showReturnAgency: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    showPromoCode: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    showDefaultAge: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    stepBetweenBooking: {
      type: DataTypes.INTEGER,
    },
    paymentListingNumber: {
      type: DataTypes.INTEGER,
    },
    active: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    permalinkMonthDurationMoved: {
      type: DataTypes.INTEGER,
      defaultValue: 6,
      allowNull: false,
    },
    permalinkMonthDurationGone: {
      type: DataTypes.INTEGER,
      defaultValue: 6,
      allowNull: false,
    },
    permalinkDelay: {
      type: DataTypes.INTEGER,
      defaultValue: 240,
      allowNull: false,
    },
    robotTxtUrl: {
      type: DataTypes.STRING,
    },
    setting: {
      type: DataTypes.STRING,
    },
    defaultHighlightedExtra: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    applicationCode: {
      type: DataTypes.STRING,
    },
  }, {
    tableName: 'application',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  Application.associate = (models) => {
    Application.belongsTo(models.branch, {
      foreignKey: {
        name: 'branchIdKey',
        field: 'branch_id',
      },
      targetKey: 'branchId',
      as: 'branch',
    });
    Application.belongsToMany(models.vehicleType, {
      through: 'applicationVehicleType',
      foreignKey: 'application_id',
      otherKey: 'vehicle_type_id',
      as: 'vehicleTypeThroughApplicationVehicleTypes',
    });
    Application.hasMany(models.agencyFilter, {
      foreignKey: {
        name: 'applicationIdKey',
        field: 'application_id',
      },
      sourceKey: 'applicationId',
      as: 'agencyFilters',
    });
    Application.hasMany(models.booking, {
      foreignKey: {
        name: 'applicationIdKey',
        field: 'application_id',
      },
      sourceKey: 'applicationId',
      as: 'bookings',
    });
    Application.hasMany(models.paymentType, {
      foreignKey: {
        name: 'applicationIdKey',
        field: 'application_id',
      },
      sourceKey: 'applicationId',
      as: 'paymentTypes',
    });
    Application.hasMany(models.paymentTypeCategory, {
      foreignKey: {
        name: 'applicationIdKey',
        field: 'application_id',
      },
      sourceKey: 'applicationId',
      as: 'paymentTypeCategories',
    });
    Application.hasMany(models.permalink, {
      foreignKey: {
        name: 'applicationIdKey',
        field: 'application_id',
      },
      sourceKey: 'applicationId',
      as: 'permalinks',
    });
    Application.hasMany(models.slug, {
      foreignKey: {
        name: 'applicationIdKey',
        field: 'application_id',
      },
      sourceKey: 'applicationId',
      as: 'slugs',
    });
    Application.hasMany(models.typeRequest, {
      foreignKey: {
        name: 'applicationIdKey',
        field: 'application_id',
      },
      sourceKey: 'applicationId',
      as: 'typeRequests',
    });
    Application.hasMany(models.vehicleTypeFilter, {
      foreignKey: {
        name: 'applicationIdKey',
        field: 'application_id',
      },
      sourceKey: 'applicationId',
      as: 'vehicleTypeFilters',
    });
  };

  return Application;
};
