// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const IncludedService = sequelize.define('includedService', {
    includedServiceId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      allowNull: false,
    },
    displayOrder: {
      type: DataTypes.INTEGER,
    },
    active: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    isFilter: {
      type: DataTypes.INTEGER,
    },
    displayListing: {
      type: DataTypes.INTEGER,
    },
  }, {
    tableName: 'included_service',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  IncludedService.associate = (models) => {
    IncludedService.belongsTo(models.branch, {
      foreignKey: {
        name: 'branchIdKey',
        field: 'branch_id',
      },
      targetKey: 'branchId',
      as: 'branch',
    });
    IncludedService.belongsTo(models.includedServiceCategory, {
      foreignKey: {
        name: 'includedServiceCategoryIdKey',
        field: 'included_service_category_id',
      },
      targetKey: 'includedServiceCategoryId',
      as: 'includedServiceCategory',
    });
    IncludedService.belongsTo(models.media, {
      foreignKey: {
        name: 'mediaIdKey',
        field: 'media_id',
      },
      targetKey: 'mediaId',
      as: 'media',
    });
    IncludedService.belongsToMany(models.vehicle, {
      through: 'includedServiceVehicle',
      foreignKey: 'included_service_id',
      otherKey: 'vehicle_id',
      as: 'vehicleThroughIncludedServiceVehicles',
    });
    IncludedService.hasMany(models.includedServiceTranslation, {
      foreignKey: {
        name: 'includedServiceIdKey',
        field: 'included_service_id',
      },
      sourceKey: 'includedServiceId',
      as: 'includedServiceIncludedServiceTranslations',
    });
  };

  return IncludedService;
};
