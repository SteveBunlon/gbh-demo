// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Extra = sequelize.define('extra', {
    extraId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      allowNull: false,
    },
    title: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    extraErpCode: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    displayOrder: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    unfoldedDisplay: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    maxQuantity: {
      type: DataTypes.INTEGER,
    },
    defaultSelection: {
      type: DataTypes.INTEGER,
    },
    color: {
      type: DataTypes.STRING,
    },
    active: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    extraWaitingPeriod: {
      type: DataTypes.INTEGER,
    },
    maxDaysBooking: {
      type: DataTypes.INTEGER,
    },
  }, {
    tableName: 'extra',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  Extra.associate = (models) => {
    Extra.belongsTo(models.extraType, {
      foreignKey: {
        name: 'extraTypeIdKey',
        field: 'extra_type_id',
      },
      targetKey: 'extraTypeId',
      as: 'extraType',
    });
    Extra.belongsTo(models.branch, {
      foreignKey: {
        name: 'branchIdKey',
        field: 'branch_id',
      },
      targetKey: 'branchId',
      as: 'branch',
    });
    Extra.belongsTo(models.groupExtra, {
      foreignKey: {
        name: 'groupExtraIdKey',
        field: 'group_extra_id',
      },
      targetKey: 'groupExtraId',
      as: 'groupExtra',
    });
    Extra.belongsToMany(models.bookingExtra, {
      through: 'bookingLinkedExtra',
      foreignKey: 'extra_id',
      otherKey: 'booking_extra_id',
      as: 'bookingExtraThroughBookingLinkedExtras',
    });
    Extra.belongsToMany(models.agency, {
      through: 'extraAgency',
      foreignKey: 'extra_id',
      otherKey: 'agency_id',
      as: 'agencyThroughExtraAgencies',
    });
    Extra.belongsToMany(models.extraDetail, {
      through: 'extraDetailExtra',
      foreignKey: 'extra_id',
      otherKey: 'extra_detail_id',
      as: 'extraDetailThroughExtraDetailExtras',
    });
    Extra.belongsToMany(models.media, {
      through: 'extraMedia',
      foreignKey: 'extra_id',
      otherKey: 'media_id',
      as: 'mediaThroughExtraMedias',
    });
    Extra.belongsToMany(models.extra, {
      through: 'linkedExtra',
      foreignKey: 'linked_extra_id',
      otherKey: 'extra_id',
      as: 'extraThroughLinkedExtras',
    });
    Extra.belongsToMany(models.extra, {
      through: 'linkedExtra',
      foreignKey: 'extra_id',
      otherKey: 'linked_extra_id',
      as: 'extraThroughLinkedExtrasExtraId',
    });
    Extra.belongsToMany(models.workflowTask, {
      through: 'workflowTaskExtra',
      foreignKey: 'extra_id',
      otherKey: 'workflow_task_id',
      as: 'workflowTaskThroughWorkflowTaskExtras',
    });
    Extra.hasMany(models.bookingExtra, {
      foreignKey: {
        name: 'extraIdKey',
        field: 'extra_id',
      },
      sourceKey: 'extraId',
      as: 'bookingExtras',
    });
    Extra.hasMany(models.extraTranslation, {
      foreignKey: {
        name: 'extraIdKey',
        field: 'extra_id',
      },
      sourceKey: 'extraId',
      as: 'extraTranslations',
    });
    Extra.hasMany(models.featuredExtra, {
      foreignKey: {
        name: 'extraIdKey',
        field: 'extra_id',
      },
      sourceKey: 'extraId',
      as: 'featuredExtras',
    });
    Extra.hasMany(models.rateExtraSeason, {
      foreignKey: {
        name: 'extraIdKey',
        field: 'extra_id',
      },
      sourceKey: 'extraId',
      as: 'rateExtraSeasons',
    });
    Extra.hasMany(models.rateVehicleExtra, {
      foreignKey: {
        name: 'extraIdKey',
        field: 'extra_id',
      },
      sourceKey: 'extraId',
      as: 'rateVehicleExtras',
    });
  };

  return Extra;
};
