// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Locale = sequelize.define('locale', {
    localeCode: {
      type: DataTypes.STRING,
      primaryKey: true,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
  }, {
    tableName: 'locale',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  Locale.associate = (models) => {
    Locale.hasMany(models.agencyTypeTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeAgencyTypeTranslations',
    });
    Locale.hasMany(models.attributeTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeAttributeTranslations',
    });
    Locale.hasMany(models.booking, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeBookings',
    });
    Locale.hasMany(models.branchTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeBranchTranslations',
    });
    Locale.hasMany(models.civilityTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeCivilityTranslations',
    });
    Locale.hasMany(models.companyLocale, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeCompanyLocales',
    });
    Locale.hasMany(models.countryTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeCountryTranslations',
    });
    Locale.hasMany(models.customer, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeCustomers',
    });
    Locale.hasMany(models.driverAgeTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeDriverAgeTranslations',
    });
    Locale.hasMany(models.extraDetailTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeExtraDetailTranslations',
    });
    Locale.hasMany(models.extraTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeExtraTranslations',
    });
    Locale.hasMany(models.groupExtraHeaderTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeGroupExtraHeaderTranslations',
    });
    Locale.hasMany(models.groupExtraTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeGroupExtraTranslations',
    });
    Locale.hasMany(models.includedServiceCategoryTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeIncludedServiceCategoryTranslations',
    });
    Locale.hasMany(models.includedServiceTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeIncludedServiceTranslations',
    });
    Locale.hasMany(models.mediaTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeMediaTranslations',
    });
    Locale.hasMany(models.paymentTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodePaymentTranslations',
    });
    Locale.hasMany(models.paymentTypeTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodePaymentTypeTranslations',
    });
    Locale.hasMany(models.permalink, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodePermalinks',
    });
    Locale.hasMany(models.predefinedValueTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodePredefinedValueTranslations',
    });
    Locale.hasMany(models.slug, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeSlugs',
    });
    Locale.hasMany(models.timeUnitTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeTimeUnitTranslations',
    });
    Locale.hasMany(models.typeRequestTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeTypeRequestTranslations',
    });
    Locale.hasMany(models.vehicleTypeFilterTranslation, {
      foreignKey: {
        name: 'localeCodeKey',
        field: 'locale_code',
      },
      sourceKey: 'localeCode',
      as: 'localeCodeVehicleTypeFilterTranslations',
    });
  };

  return Locale;
};
