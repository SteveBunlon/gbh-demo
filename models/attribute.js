// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Attribute = sequelize.define('attribute', {
    attributeId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      allowNull: false,
    },
    erpDataSource: {
      type: DataTypes.STRING,
    },
    filterDisplayType: {
      type: DataTypes.ENUM('radio','checkbox','slider'),
      defaultValue: "radio",
      allowNull: false,
    },
    showFilter: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    displayOrder: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    active: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    unfoldedDisplay: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
    },
    displayListing: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
    },
  }, {
    tableName: 'attribute',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  Attribute.associate = (models) => {
    Attribute.belongsTo(models.branch, {
      foreignKey: {
        name: 'branchIdKey',
        field: 'branch_id',
      },
      targetKey: 'branchId',
      as: 'branch',
    });
    Attribute.belongsTo(models.media, {
      foreignKey: {
        name: 'mediaIdKey',
        field: 'media_id',
      },
      targetKey: 'mediaId',
      as: 'media',
    });
    Attribute.hasMany(models.attributeTranslation, {
      foreignKey: {
        name: 'attributeIdKey',
        field: 'attribute_id',
      },
      sourceKey: 'attributeId',
      as: 'attributeTranslations',
    });
    Attribute.hasMany(models.predefinedValue, {
      foreignKey: {
        name: 'attributeIdKey',
        field: 'attribute_id',
      },
      sourceKey: 'attributeId',
      as: 'predefinedValues',
    });
  };

  return Attribute;
};
