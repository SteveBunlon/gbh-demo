// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const VehicleType = sequelize.define('vehicleType', {
    vehicleTypeId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      allowNull: false,
    },
    vehicleTypeCode: {
      type: DataTypes.STRING,
    },
    order: {
      type: DataTypes.INTEGER,
    },
    cmsTitle: {
      type: DataTypes.STRING,
    },
    active: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP(6)'),
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    description: {
      type: DataTypes.STRING,
    },
    vehicleTypeFamily: {
      type: DataTypes.ENUM('BOOKING','GUARDING'),
      defaultValue: "BOOKING",
      allowNull: false,
    },
    erpSource: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
  }, {
    tableName: 'vehicle_type',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  VehicleType.associate = (models) => {
    VehicleType.belongsTo(models.branch, {
      foreignKey: {
        name: 'branchIdKey',
        field: 'branch_id',
      },
      targetKey: 'branchId',
      as: 'branch',
    });
    VehicleType.belongsToMany(models.application, {
      through: 'applicationVehicleType',
      foreignKey: 'vehicle_type_id',
      otherKey: 'application_id',
      as: 'applicationThroughApplicationVehicleTypes',
    });
    VehicleType.belongsToMany(models.vehicle, {
      through: 'secondaryVehicleType',
      foreignKey: 'vehicle_type_id',
      otherKey: 'vehicle_id',
      as: 'vehicleThroughSecondaryVehicleTypes',
    });
    VehicleType.belongsToMany(models.vehicleTypeFilter, {
      through: 'vehicleTypeFilterVehicleType',
      foreignKey: 'vehicle_type_id',
      otherKey: 'vehicle_type_filter_id',
      as: 'vehicleTypeFilterThroughVehicleTypeFilterVehicleTypes',
    });
    VehicleType.hasMany(models.leadForm, {
      foreignKey: {
        name: 'vehicleTypeIdKey',
        field: 'vehicle_type_id',
      },
      sourceKey: 'vehicleTypeId',
      as: 'vehicleTypeLeadForms',
    });
    VehicleType.hasMany(models.vehicle, {
      foreignKey: {
        name: 'vehicleTypeIdKey',
        field: 'vehicle_type_id',
      },
      sourceKey: 'vehicleTypeId',
      as: 'vehicleTypeVehicles',
    });
    VehicleType.hasMany(models.vehicleTypeLink, {
      foreignKey: {
        name: 'vehicleTypeIdKey',
        field: 'vehicle_type_id',
      },
      sourceKey: 'vehicleTypeId',
      as: 'vehicleTypeVehicleTypeLinks',
    });
  };

  return VehicleType;
};
